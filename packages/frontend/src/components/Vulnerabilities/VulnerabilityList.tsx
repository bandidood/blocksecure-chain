import { AlertTriangle, CheckCircle, Info, XCircle } from 'lucide-react';
import { Vulnerability } from '../../services/api';

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
}

export function VulnerabilityList({ vulnerabilities }: VulnerabilityListProps) {
  if (vulnerabilities.length === 0) {
    return (
      <div className="bg-slate-800 rounded-lg border border-slate-700 p-12 text-center">
        <CheckCircle className="w-16 h-16 text-green-400 mx-auto mb-4" />
        <h3 className="text-xl font-bold text-white mb-2">No Vulnerabilities Found</h3>
        <p className="text-slate-400">This contract appears to be secure.</p>
      </div>
    );
  }

  return (
    <div className="bg-slate-800 rounded-lg border border-slate-700">
      <div className="p-6 border-b border-slate-700">
        <h2 className="text-2xl font-bold text-white flex items-center gap-2">
          <AlertTriangle className="w-6 h-6 text-yellow-400" />
          Vulnerabilities Detected ({vulnerabilities.length})
        </h2>
      </div>

      <div className="divide-y divide-slate-700">
        {vulnerabilities.map((vuln, index) => (
          <VulnerabilityItem key={index} vulnerability={vuln} index={index} />
        ))}
      </div>
    </div>
  );
}

interface VulnerabilityItemProps {
  vulnerability: Vulnerability;
  index: number;
}

function VulnerabilityItem({ vulnerability, index }: VulnerabilityItemProps) {
  const { icon: Icon, color, bgColor, borderColor } = getSeverityStyle(vulnerability.severity);

  return (
    <div className="p-6 hover:bg-slate-750 transition-colors">
      <div className="flex items-start gap-4">
        <div className={`flex-shrink-0 w-10 h-10 rounded-full ${bgColor} flex items-center justify-center`}>
          <Icon className={`w-5 h-5 ${color}`} />
        </div>

        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between gap-4 mb-2">
            <div>
              <div className="flex items-center gap-2 mb-1">
                <span className="text-slate-400 text-sm">#{index + 1}</span>
                <span className={`px-2 py-1 rounded text-xs font-bold ${bgColor} ${color} border ${borderColor}`}>
                  {vulnerability.severity}
                </span>
                <span className="px-2 py-1 rounded text-xs font-medium bg-slate-900 text-slate-300 border border-slate-700">
                  {vulnerability.type}
                </span>
              </div>
              <h3 className="text-lg font-semibold text-white">{vulnerability.title}</h3>
            </div>
          </div>

          <p className="text-slate-300 mb-4">{vulnerability.description}</p>

          {vulnerability.file && (
            <div className="mb-3">
              <span className="text-sm text-slate-400">
                Location: <span className="text-cyan-400 font-mono">{vulnerability.file}</span>
                {vulnerability.line && <span className="text-slate-500">:{vulnerability.line}</span>}
              </span>
            </div>
          )}

          {vulnerability.recommendation && (
            <div className="mb-3 p-3 bg-slate-900 rounded border border-slate-700">
              <p className="text-sm text-slate-400 mb-1">ðŸ’¡ Recommendation:</p>
              <p className="text-sm text-slate-200">{vulnerability.recommendation}</p>
            </div>
          )}

          {vulnerability.references && vulnerability.references.length > 0 && (
            <div className="flex items-center gap-2 flex-wrap">
              <span className="text-sm text-slate-400">References:</span>
              {vulnerability.references.map((ref, idx) => (
                <a
                  key={idx}
                  href={ref}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-cyan-400 hover:text-cyan-300 underline"
                >
                  Link {idx + 1}
                </a>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

function getSeverityStyle(severity: string) {
  switch (severity.toUpperCase()) {
    case 'CRITICAL':
      return {
        icon: XCircle,
        color: 'text-red-400',
        bgColor: 'bg-red-900/20',
        borderColor: 'border-red-800',
      };
    case 'HIGH':
      return {
        icon: AlertTriangle,
        color: 'text-orange-400',
        bgColor: 'bg-orange-900/20',
        borderColor: 'border-orange-800',
      };
    case 'MEDIUM':
      return {
        icon: AlertTriangle,
        color: 'text-yellow-400',
        bgColor: 'bg-yellow-900/20',
        borderColor: 'border-yellow-800',
      };
    case 'LOW':
      return {
        icon: Info,
        color: 'text-blue-400',
        bgColor: 'bg-blue-900/20',
        borderColor: 'border-blue-800',
      };
    default:
      return {
        icon: Info,
        color: 'text-slate-400',
        bgColor: 'bg-slate-900/20',
        borderColor: 'border-slate-700',
      };
  }
}
